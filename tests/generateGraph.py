from src.utils.generators.generatorGraph import generatorGraph

def main():
    # 1Ô∏è‚É£ G√©n√©ration d'un graphe al√©atoire
    graph = generatorGraph(10)  # Choisir 10 villes al√©atoires pour le test
    print("‚úÖ Graphe g√©n√©r√© avec", graph.getDegree(), "villes.")

    # 2Ô∏è‚É£ Afficher toutes les villes
    print("\nüìç Liste des villes :")
    for city_name in graph.getAllCities():
        city = graph.getCity(city_name)
        print(f" - {city.getName()} ({city.numberOfWarehouses()} entrep√¥ts)")

    # 3Ô∏è‚É£ Afficher toutes les routes
    print("\nüõ£Ô∏è Liste des routes :")
    for road in graph.getAllRoads():
        print(f" - {road.getStartCity().getName()} -> {road.getEndCity().getName()} : {road.getDistance()} km")

    # 4Ô∏è‚É£ Tester le degr√© (nombre de connexions) d'une ville
    test_city = graph.getAllCities()[0]  # Prendre la premi√®re ville de la liste
    degree = graph.getDegreeNode(test_city)
    print(f"\nüî∏ La ville '{test_city}' a {degree} routes sortantes.")

    # 5Ô∏è‚É£ Afficher les routes partant d'une ville
    print(f"\nüöè Routes partant de '{test_city}':")
    for road in graph.getRoadsFrom(test_city):
        print(f"   -> {road.getEndCity().getName()} ({road.getDistance()} km)")

    # 6Ô∏è‚É£ Tester la gestion des entrep√¥ts
    city_obj = graph.getCity(test_city)
    print(f"\nüè¨ Entrep√¥ts √† {test_city} : {city_obj.numberOfWarehouses()} entrep√¥t(s).")
    print("üì¶ Stock du premier entrep√¥t :", city_obj.returnWarehouse())

    # 7Ô∏è‚É£ Ajouter une ville et une route manuellement
    print("\n‚ûï Ajout manuel d'une nouvelle ville 'TESTVILLE' et d'une route vers", test_city)
    graph.addCity("TESTVILLE")
    graph.addRoad("TESTVILLE", test_city, 42.0)

    # V√©rification apr√®s ajout
    print("Villes apr√®s ajout :", graph.getAllCities())
    print("Routes apr√®s ajout :")
    for road in graph.getAllRoads():
        print(f" - {road.getStartCity().getName()} -> {road.getEndCity().getName()} : {road.getDistance()} km")

    # 8Ô∏è‚É£ Repr√©sentation textuelle du graphe
    print("\nüñºÔ∏è Repr√©sentation textuelle du graphe :")
    print(graph)

if __name__ == "__main__":
    main()
